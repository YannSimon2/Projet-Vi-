import numpy as np
import matplotlib.pyplot as plt
from numba import jit
import matplotlib.animation as animation

# Parameters
mu = 1e-3  # Dynamic viscosity of water (Pa.s)
rho = 1000  # Density of water (kg/m^3)
L = 2e-3  # Length of the domain (m)
dp_dz = 1000  # Pressure gradient (Pa/m)


x = np.linspace(0, L, 20)  # x-coordinates
y = np.linspace(0, L, 20)  # y-coordinates
dx = x[1] - x[0]
dy = y[1] - y[0]
X, Y = np.meshgrid(x, y, indexing='ij')

@jit(nopython=True)
def jacobi_iteration(u,k):
    u_new = np.zeros_like(u)
    for i in range(1, u.shape[0]-1):
        for j in range(1, u.shape[1]-1):
            u_new[i,j] = 0.25 * (u[i+1,j] + u[i-1,j] + u[i,j+1] + u[i,j-1]) - 0.25*dp_dz/mu
    error = np.max(np.abs(u_new - u))
    return u_new, error

# Initial guess
u = np.zeros((x.size, y.size))
tolerance = 1e-6
max_iterations = 10000
for k in range(max_iterations):
    u, error = jacobi_iteration(u, k)
    if error < tolerance:
        print(f'Converged after {k} iterations with error {error:.2e}')
        break   

# Plot the solution u(x,y)
plt.figure(figsize=(10, 8))
plt.contourf(X, Y, u, 20, cmap='viridis')
plt.colorbar(label='u(x,y)')
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.title('Solution u(x,y)')
plt.show()

